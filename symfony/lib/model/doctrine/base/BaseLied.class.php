<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Lied', 'doctrine');

/**
 * BaseLied
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property text $titel
 * @property integer $rubrik_id
 * @property text $stichwoerter
 * @property text $bemerkungen
 * @property Doctrine_Collection $Liederbucher
 * @property Rubrik $Rubrik
 * @property Doctrine_Collection $Liedtext
 * @property Doctrine_Collection $Refrain
 * @property Doctrine_Collection $FkLiederbuchLied
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method text                getTitel()            Returns the current record's "titel" value
 * @method integer             getRubrikId()         Returns the current record's "rubrik_id" value
 * @method text                getStichwoerter()     Returns the current record's "stichwoerter" value
 * @method text                getBemerkungen()      Returns the current record's "bemerkungen" value
 * @method Doctrine_Collection getLiederbucher()     Returns the current record's "Liederbucher" collection
 * @method Rubrik              getRubrik()           Returns the current record's "Rubrik" value
 * @method Doctrine_Collection getLiedtext()         Returns the current record's "Liedtext" collection
 * @method Doctrine_Collection getRefrain()          Returns the current record's "Refrain" collection
 * @method Doctrine_Collection getFkLiederbuchLied() Returns the current record's "FkLiederbuchLied" collection
 * @method Lied                setId()               Sets the current record's "id" value
 * @method Lied                setTitel()            Sets the current record's "titel" value
 * @method Lied                setRubrikId()         Sets the current record's "rubrik_id" value
 * @method Lied                setStichwoerter()     Sets the current record's "stichwoerter" value
 * @method Lied                setBemerkungen()      Sets the current record's "bemerkungen" value
 * @method Lied                setLiederbucher()     Sets the current record's "Liederbucher" collection
 * @method Lied                setRubrik()           Sets the current record's "Rubrik" value
 * @method Lied                setLiedtext()         Sets the current record's "Liedtext" collection
 * @method Lied                setRefrain()          Sets the current record's "Refrain" collection
 * @method Lied                setFkLiederbuchLied() Sets the current record's "FkLiederbuchLied" collection
 * 
 * @package    adonai
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLied extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('Lied');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'notnull' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('titel', 'text', null, array(
             'type' => 'text',
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('rubrik_id', 'integer', 8, array(
             'type' => 'integer',
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('stichwoerter', 'text', null, array(
             'type' => 'text',
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('bemerkungen', 'text', null, array(
             'type' => 'text',
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Liederbuch as Liederbucher', array(
             'refClass' => 'FkLiederbuchLied',
             'local' => 'lied_id',
             'foreign' => 'liederbuch_id'));

        $this->hasOne('Rubrik', array(
             'local' => 'rubrik_id',
             'foreign' => 'id',
             'onDelete' => 'NO ACTION',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('Liedtext', array(
             'local' => 'id',
             'foreign' => 'lied_id',
             'cascade' => array(
             0 => 'delete',
             )));

        $this->hasMany('Refrain', array(
             'local' => 'id',
             'foreign' => 'lied_id',
             'cascade' => array(
             0 => 'delete',
             )));

        $this->hasMany('FkLiederbuchLied', array(
             'local' => 'id',
             'foreign' => 'lied_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}