<?php

/**
 * Lied
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    adonai
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Lied extends BaseLied
{
	/**
	 * Gets the overview array of the current Lied. The nr is gotten either by the
	 * given liederbuchId or if liederbuchId is left to "0" the first found result will be taken.
	 * (Note: If there was already a join-Query from which this Lied was requested
	 * (as it is in Lied -> executeIndex) "getFkLiederbuchLied" will not request a l l references again.)
	 * @param unknown_type $nr
	 * @return multitype:NULL
	 */
	public function getOverviewArray($liederbuchId = 0)
	{
		$nr = "error-overviewArray!";
		if($liederbuchId == 0){
			$nr = $this->getFkLiederbuchLied()->get(0)->getLiedNr();
		}else{
			foreach($this->getFkLiederbuchLied() as $fk){
				//echo "/*checking if " . $fk->getLiederbuchId() . " is == " . $liederbuchId . "*/";
				if($fk->getLiederbuchId() == $liederbuchId){
					$nr = $fk->getLiedNr();
					break;
				}
			}
		}
		
		return array(
			'id' => $this->getId(),
			'nr' => $nr,
			'title' => $this->getTitel(),
			'category' => $this->getRubrik()->getRubrik()
		);
	}

	public function getShowArray(){
		return array(
			'id' => $this->getId(),
			'title' => $this->getTitel(),
			'category' => $this->getRubrik()->getRubrik(),
			'categoryId' => $this->getRubrik()->getId(),
			'createdAt' => $this->getCreatedAt(),
			'updatedAt' => $this->getUpdatedAt()
		);
	}
	
	/**
	 * Returns an array with all songbooks (no mather if the song has a number
	 * for that book or not) and also returns the assigned number if one
	 * can be found.
	 */
	public function getAllSongbooksWithNumberArray(){
		$songbookArray = array();

		//get all books no mather if the current song has a link to that songook
		$songbooks = Doctrine_Core::getTable('Liederbuch')
		->createQuery('a')
		->execute();
		 
		//loop over all books and get the OverviewArray of each book
		//AND add a number attribute which is until now null
		foreach($songbooks as $aBook){
			$bookArray = $aBook->getOverviewArray();
			$songbookArray[$bookArray["id"]] = $bookArray;
			$songbookArray[$bookArray["id"]]["number"] = null;
		}
	  
		//loop over all assigned books and get the number
		foreach($this->getFkLiederbuchLied() as $aBookNumber){
			$songbookArray[$aBookNumber->getLiederbuchId()]["number"] = $aBookNumber->getLiednr();//getOverviewArray();
		}
		return array_values($songbookArray);
	}

	/**
	 * Returns a collection of all refrains that are assigned to this song over the "Liedtext"s
	 * If a refrain is assigned more than once (to different liedtexts) it will still appear
	 * only once on the list.
	 */
	public function getAssignedRefrains(){
		//$refrainArray;
		$i = 0;
		foreach($this->getLiedtext() as $liedtext){
			$refrain = $liedtext->getRefrain();
			/*echo "------------------------------";
			echo $i . "<br>";
			//var_dump($refrain);*/
			if($refrain->getId()){
				//echo $i . " is not null (" . $refrain->getId() . ")";
				$refrainArray[$refrain->getId()] = $refrain;
			}/*else{
				echo $i . " is null";
			}
			echo " ende\n<br>";
			$i++;*/
		}
		return $refrainArray;
	}
	
	/*
	 * Returns the IDs of all assigned songtexts to that song.
	 */
	public function getAllVerseIds(){
		foreach($this->getLiedtext() as $liedtext){
			$r[$liedtext->getReihenfolge()] = $liedtext->getId();
		}
		
		//sort the array based on the "Reihenfolge"-Attribut.
		ksort($r);
		
		return array_values($r);
	}
	
	/**
	 * Tries to find the association between this Lied and the given $liederbuchId. If no association
	 * could be found, it creates one. At the end it assigns the given number to that association.
	 * If $nr is null or empty the asscociation will be deleted.
	 * @param unknown_type $liederbuchId
	 * @param unknown_type $nr
	 */
	public function setSingleLiederbuchNr($liederbuchId, $nr){
		$foundRecord = false;
		if(!$nr){
			$this->unlinkInDb("Liederbucher", $liederbuchId);
			return;
		}
		
		$liederbuchTitle = "";
		$oldNr = "";
		
		foreach($this->getFkLiederbuchLied() as $fkLiederbuchLied){
			$currentLiederbuchId = $fkLiederbuchLied->getLiederbuchId();
			if($liederbuchId == $currentLiederbuchId){
				$liederbuchTitle = $fkLiederbuchLied->getLiederbuch()->getBuchname();
				$oldNr = $fkLiederbuchLied->getLiednr();
				$fkLiederbuchLied->setLiednr($nr);
				$fkLiederbuchLied->save();
				$foundRecord = true;
			}
		}
		
		if(!$foundRecord){
			$newRelation = new FkLiederbuchLied();
			$newRelation->setLied($this);
			$newRelation->setLiederbuchId($liederbuchId);
			$newRelation->setLiednr($nr);
			$newRelation->save();
			$this->refresh(true);
			$liederbuchTitle = $newRelation->getLiederbuch()->getBuchname();
		}
		
		$dbLogger = Logger::getLogger("dbLogger");
		$messageToLog = "lied->quickUpdateLiedNr set LiedNr for song '" . $this->getTitel() . "'; id=" . $this->getId() . " (user=" . $_SESSION["email"] . ", id=" . $_SESSION["id"] . ")";
		$messageToLog .= "\nLiederbuch: " . $liederbuchTitle . " old: " . $oldNr . " new: " . $nr;
		$dbLogger->info($messageToLog);
	}
}