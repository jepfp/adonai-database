<project name="Build and Deploy of Adoray Songserver" default="deployLocal">
	<description>Different deployment and build tasks</description>
	<!-- Load property file -->
	<property file="buildAndDeploy.properties" />

	<!-- The following properties can be overridden by buildAndDeploy.properties -->
	<property name="sencha-exe" value="C:\Users\Philipp\bin\Sencha\Cmd\5.1.3.61\sencha.exe" />
	<property name="buildMode" value="production" />
	<property name="buildDir" value="build" />
	<property name="environment" value="localBuild" />
	<property name="zipFilename" value="zip.zip" />
	<property name="zipLocation" value="${buildDir}/${zipFilename}" />


	<target name="info">
		<echo>This build file is designed to build and deploy the Songserver project locally or to docker.</echo>
		<echo>The current build and deploy configuration is:</echo>
		<echo>sencha-exe:     ${sencha-exe}</echo>
		<echo>buildDir:       ${buildDir}</echo>
		<echo>environment:     ${environment}</echo>
	</target>

	<target name="cleanBuildFolder">
		<echo>Deleting the build folder (${buildDir})...</echo>
		<delete dir="${buildDir}" />
		<echo>Creating the build folder structure (${buildDir})...</echo>
		<mkdir dir="${buildDir}" />
		<mkdir dir="${buildDir}/log" />
	</target>

	<target name="buildForDocker" depends="deployLocal, stageDockerBuild">
		<!--<target name="buildForDocker" depends="stageDockerBuild">-->
		<echo>Build of ${environment} finished and ready of taking.</echo>
	</target>

	<target name="stageDockerBuild">
		<copy todir="${buildDir}/dockerStage/www">
			<fileset dir="${buildDir}/all" />
		</copy>
	</target>

	<target name="deployLocal" depends="info, cleanBuildFolder, buildSenchaApp, build, overwriteBuildConfiguration">
		<echo>Local deployment for ${environment} finished: ${buildDir}/all - http://localhost/adonai-database/${buildDir}/all/</echo>
	</target>

	<target name="build">
		<echo>Creating build folder (${buildDir}/all)...</echo>
		<echo>Copy ext-js part...</echo>
		<copy todir="${buildDir}/all/resources">
			<fileset dir="build/${buildMode}/Songserver/resources" />
		</copy>
		<copy todir="${buildDir}/all/content">
			<fileset dir="content" />
		</copy>
		<copy todir="${buildDir}/all">
			<fileset file="build/${buildMode}/Songserver/app.js" />
			<fileset file="build/${buildMode}/Songserver/app.json" />
			<fileset file="build/${buildMode}/Songserver/index.php" />
		</copy>
		<copy todir="${buildDir}/all">
			<fileset file="build/${buildMode}/Songserver/app.json" />
		</copy>
		<copy todir="${buildDir}/all/resources">
			<fileset file="build/${buildMode}/Songserver/resources/Songserver-all.css" />
		</copy>
		<echo>Scotty source files...</echo>
		<copy todir="${buildDir}/all/src">
			<fileset dir="src" />
		</copy>
		<copy todir="${buildDir}/all">
			<fileset file="_index.html" />
			<fileset file="faq.php" />
		</copy>
		<copy todir="${buildDir}/all/client">
			<fileset dir="client" />
		</copy>
		<copy todir="${buildDir}/all/integration-testing">
			<fileset dir="integration-testing" />
		</copy>
		<copy todir="${buildDir}/all/sfWeb">
			<fileset dir="sfWeb" />
		</copy>
	</target>

	<target name="overwriteBuildConfiguration" description="Overwrites the build with it's configuration so that we can test directly.">
		<echo>Updating the local build with it's configuration (${environment})</echo>
		<echo>Configuration source deploy/configurations/${environment}</echo>
		<copy todir="${buildDir}/all" overwrite="true">
			<fileset dir="deploy/configurations/${environment}" />
		</copy>
	</target>

	<target name="buildSenchaApp" description="Builds the JS-Code">
		<echo>Building Sencha App</echo>
		<echo>IMPORTANT: Make sure sencha Cmd 5.1.3.61 and Ruby 1.9.3 are installed and that ruby is available through the systems path.</echo>
		<exec executable="${sencha-exe}">
			<arg line="app build ${buildMode}" />
		</exec>
	</target>

	<target name="enableMaintenance" description="Uploads a maintenance file.">
		<echo>Uploading maintenance file to ${server}</echo>
		<copy file="_index.html" tofile="index.html" />
		<ftp server="${server}" userid="${serverUserId}" password="${serverPassword}" remotedir="" passive="yes" binary="no" verbose="yes">
			<fileset dir=".">
				<include name="index.html" />
			</fileset>
		</ftp>
		<delete>
			<fileset dir="." includes="index.html" />
		</delete>
	</target>

	<target name="disableMaintenance" description="Deletes the maintenance files.">
		<echo>Deleting maintenance files on ${server}</echo>
		<ftp server="${server}" userid="${serverUserId}" password="${serverPassword}" verbose="yes" action="delete">
			<fileset file="index.htm*" />
		</ftp>
	</target>
</project>